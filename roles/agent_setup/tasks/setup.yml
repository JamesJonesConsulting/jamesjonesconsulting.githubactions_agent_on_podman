---
# - name: Setup Podman socket permissions
#   include_role:
#     name: jamesjonesconsulting.podman_socket_group_permissions.permissions_setup
#   vars:
#     podman_user_group: "{{ github_actions_agent_podman_group }}"
#     podman_users:
#       - "{{ agent.username }}"
- set_fact:
    github_actions_agent_working_dir: "{{ github_actions_agent_base_folder }}/{{ agent.folder }}"
- name: Create directory for the agent
  file:
    path: "{{ github_actions_agent_working_dir }}"
    state: directory 
    owner: "{{ agent.username }}"
    group: "{{ agent.username }}"
- name: Unarchive latest agent tar.gz file that needs to be downloaded
  ansible.builtin.unarchive:
    src: "https://github.com/actions/runner/releases/download/{{ github_actions_agent_release_tag }}/actions-runner-linux-x64-{{ github_actions_agent_version }}.tar.gz"
    dest: "{{ github_actions_agent_working_dir }}"
    owner: "{{ agent.username }}"
    group: "{{ agent.username }}"   
    remote_src: yes
- name: Ensure any dependencies are installed 
  shell: "bin/installdependencies.sh"
  args:
    chdir: "{{ github_actions_agent_working_dir }}"
# - name: Configure the install of the github_actions agent 
#   command: "./config.sh {{ opts | join(' ') }}"
#   become: true
#   become_user: "{{ agent.username }}"
#   environment: "{{ github_actions_agent_environment }}"
#   vars:
#     opts:
#       - "--unattended"
#       - "--acceptTeeEula"
#       - "--agent {{ agent.folder | basename }}"
#       - "--url {{ github_actions_agent_url }}"
#       - "--auth PAT"
#       - "--token {{ github_actions_agent_registration_token }}"
#       - "--pool {{ agent.pool }}"
#       - "--replace"
#       - "--work {{ github_actions_agent_working_dir }}"
#   args:
#     chdir: "{{ github_actions_agent_working_dir }}"
# - name: Update the environment file 
#   community.general.ini_file:
#     path: "{{ github_actions_agent_working_dir }}/.env"
#     option: "{{ cnf.key }}"
#     value: "{{ cnf.value }}"
#     section: null
#     no_extra_spaces: true
#   loop: "{{ github_actions_agent_environment | dict2items }}"
#   loop_control:
#     loop_var: cnf
# - name: Install the service 
#   command: "./svc.sh {{ cmd }}"
#   loop:
#     - install
#   loop_control:
#     loop_var: cmd
#   args:
#     chdir: "{{ github_actions_agent_working_dir }}"
# - name: Reload systemd 
#   ansible.builtin.systemd:
#     daemon_reload: yes
# - name: Populate service facts
#   ansible.builtin.service_facts:
# - name: Match services running from that folder 
#   shell: |
#     cat $(systemctl show -P FragmentPath {{ svc }}) | grep ExecStart | cut -f 2 -d '=' | head -n 1 | xargs dirname
#   loop: "{{ ansible_facts.services.keys() | select('search','^actions.runner') | list }}"
#   loop_control:
#     loop_var: svc
#   register: github_actions_service_home_folders
# - block:
#     - name: Ensure Azure DevOps agent overlay directory exists
#       file:
#         path: "/etc/systemd/system/{{ github_actions_systemd_service_name }}.d"
#         state: directory 
#     - name: Add Azure DevOps agent overlay to pick up environment variables
#       template:
#         src: templates/overlay.conf.j2
#         dest: "/etc/systemd/system/{{ github_actions_systemd_service_name }}.d/overlay.conf"
#     - name: Perform a daemon-reload to pick up all the new overlays
#       ansible.builtin.systemd:
#         daemon_reload: yes
#   vars:
#     github_actions_systemd_service_name: "{{ github_actions_service_home_folders.results | selectattr('stdout', 'equalto', github_actions_agent_working_dir) | map(attribute='svc') | flatten | list | first }}"
# - name: Start the service 
#   command: "./svc.sh {{ cmd }}"
#   loop:
#     - start
#   loop_control:
#     loop_var: cmd
#   args:
#     chdir: "{{ github_actions_agent_working_dir }}"


